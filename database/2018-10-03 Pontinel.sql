-- MySQL Script generated by MySQL Workbench
-- Wed Oct  3 06:31:58 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema pontinel
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema pontinel
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `pontinel` DEFAULT CHARACTER SET utf8 ;
USE `pontinel` ;

-- -----------------------------------------------------
-- Table `pontinel`.`enterprise`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`enterprise` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`enterprise` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`region`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`region` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`region` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `number` VARCHAR(5) NOT NULL,
  `name` VARCHAR(150) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`structure`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`structure` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`structure` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `latitude` VARCHAR(15) NOT NULL,
  `longitude` VARCHAR(15) NOT NULL,
  `length` FLOAT NOT NULL,
  `width` FLOAT NOT NULL,
  `route` VARCHAR(15) NOT NULL,
  `km` DECIMAL(10,3) NOT NULL,
  `date_joined` DATETIME NOT NULL DEFAULT NOW(),
  `photo` VARCHAR(100) NULL,
  `commentary` VARCHAR(200) NULL DEFAULT '\"\"',
  `enterprise_id` INT NOT NULL,
  `region_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_structure_enterprise1_idx` (`enterprise_id` ASC),
  INDEX `fk_structure_region1_idx` (`region_id` ASC),
  CONSTRAINT `fk_structure_enterprise1`
    FOREIGN KEY (`enterprise_id`)
    REFERENCES `pontinel`.`enterprise` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_structure_region1`
    FOREIGN KEY (`region_id`)
    REFERENCES `pontinel`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`daq`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`daq` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`daq` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `fab_date` DATE NULL,
  `installation` DATE NULL,
  `phone` VARCHAR(9) NOT NULL,
  `photo` VARCHAR(100) NULL,
  `commentary` VARCHAR(200) NULL,
  `structure_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_daq_structure1_idx` (`structure_id` ASC),
  CONSTRAINT `fk_daq_structure1`
    FOREIGN KEY (`structure_id`)
    REFERENCES `pontinel`.`structure` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`node`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`node` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`node` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `fab_date` DATE NULL,
  `installation` DATE NOT NULL,
  `latitude` VARCHAR(15) NOT NULL,
  `longitude` VARCHAR(15) NOT NULL,
  `photo` VARCHAR(100) NULL,
  `commentary` VARCHAR(200) NULL,
  `daq_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_node_daq1_idx` (`daq_id` ASC),
  CONSTRAINT `fk_node_daq1`
    FOREIGN KEY (`daq_id`)
    REFERENCES `pontinel`.`daq` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`type_sensor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`type_sensor` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`type_sensor` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(150) NOT NULL,
  `model` VARCHAR(254) NOT NULL,
  `unit` VARCHAR(45) NOT NULL,
  `datasheet` VARCHAR(254) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`sensor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`sensor` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`sensor` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NULL,
  `installation_date` DATE NOT NULL,
  `latitude` VARCHAR(15) NOT NULL,
  `longitude` VARCHAR(15) NOT NULL,
  `photo` VARCHAR(100) NULL,
  `commentary` VARCHAR(200) NULL,
  `is_active` TINYINT(1) NOT NULL DEFAULT 1,
  `calibrationsheet` VARCHAR(100) NULL,
  `serial_number` VARCHAR(100) NULL,
  `node_id` INT NOT NULL,
  `type_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_sensor_node1_idx` (`node_id` ASC),
  INDEX `fk_sensor_type1_idx` (`type_id` ASC),
  CONSTRAINT `fk_sensor_node1`
    FOREIGN KEY (`node_id`)
    REFERENCES `pontinel`.`node` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sensor_type1`
    FOREIGN KEY (`type_id`)
    REFERENCES `pontinel`.`type_sensor` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`type_threshold`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`type_threshold` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`type_threshold` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `description` VARCHAR(200) NOT NULL,
  `color` VARCHAR(8) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`threshold`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`threshold` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`threshold` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `value` FLOAT NOT NULL,
  `assigned_date` DATETIME NOT NULL DEFAULT NOW(),
  `assigned_by` INT NOT NULL,
  `is_active` TINYINT(1) NOT NULL DEFAULT 1,
  `justification` VARCHAR(254) NULL,
  `sensor_id` INT NOT NULL,
  `type_threshold_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_threshold_sensor1_idx` (`sensor_id` ASC),
  INDEX `fk_threshold_type_threshold1_idx` (`type_threshold_id` ASC),
  CONSTRAINT `fk_threshold_sensor1`
    FOREIGN KEY (`sensor_id`)
    REFERENCES `pontinel`.`sensor` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_threshold_type_threshold1`
    FOREIGN KEY (`type_threshold_id`)
    REFERENCES `pontinel`.`type_threshold` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`profile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`profile` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`profile` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `description` VARCHAR(254) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`user` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(150) NOT NULL,
  `salt` VARCHAR(32) NOT NULL,
  `password` VARCHAR(128) NOT NULL,
  `first_name` VARCHAR(100) NOT NULL,
  `last_name` VARCHAR(100) NOT NULL,
  `phone` VARCHAR(9) NOT NULL,
  `email` VARCHAR(254) NOT NULL,
  `date_joined` DATETIME NOT NULL DEFAULT NOW(),
  `last_login` DATETIME NULL,
  `is_active` TINYINT(1) NOT NULL DEFAULT 1,
  `enterprise_id` INT NOT NULL,
  `profile_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `user_name_UNIQUE` (`username` ASC),
  INDEX `fk_user_enterprise1_idx` (`enterprise_id` ASC),
  INDEX `fk_user_profile1_idx` (`profile_id` ASC),
  CONSTRAINT `fk_user_enterprise1`
    FOREIGN KEY (`enterprise_id`)
    REFERENCES `pontinel`.`enterprise` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_profile1`
    FOREIGN KEY (`profile_id`)
    REFERENCES `pontinel`.`profile` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`user_has_structure`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`user_has_structure` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`user_has_structure` (
  `user_id` INT NOT NULL,
  `structure_id` INT NOT NULL,
  `assigned_date` DATETIME NOT NULL DEFAULT NOW(),
  INDEX `fk_user_has_structure_structure1_idx` (`structure_id` ASC),
  INDEX `fk_user_has_structure_user1_idx` (`user_id` ASC),
  PRIMARY KEY (`structure_id`, `user_id`),
  CONSTRAINT `fk_user_has_structure_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `pontinel`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_structure_structure1`
    FOREIGN KEY (`structure_id`)
    REFERENCES `pontinel`.`structure` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`alert`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`alert` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`alert` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `value` FLOAT NOT NULL,
  `trigger_date` DATETIME NOT NULL DEFAULT NOW(),
  `is_revised` TINYINT(1) NOT NULL DEFAULT 0,
  `revised_by` INT NULL,
  `revised_date` DATETIME NULL,
  `justification` VARCHAR(254) NULL,
  `sensor_id` INT NOT NULL,
  `threshold_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_alert_sensor1_idx` (`sensor_id` ASC),
  INDEX `fk_alert_threshold1_idx` (`threshold_id` ASC),
  CONSTRAINT `fk_alert_sensor1`
    FOREIGN KEY (`sensor_id`)
    REFERENCES `pontinel`.`sensor` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_alert_threshold1`
    FOREIGN KEY (`threshold_id`)
    REFERENCES `pontinel`.`threshold` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`freq_measure`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`freq_measure` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`freq_measure` (
  `id` INT NOT NULL,
  `value` FLOAT NOT NULL,
  `assigned_by` INT NOT NULL,
  `assigned_date` DATETIME NOT NULL DEFAULT NOW(),
  `is_active` TINYINT(1) NOT NULL DEFAULT 1,
  `sensor_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_freq_measure_sensor1_idx` (`sensor_id` ASC),
  CONSTRAINT `fk_freq_measure_sensor1`
    FOREIGN KEY (`sensor_id`)
    REFERENCES `pontinel`.`sensor` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`justify_threshold`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`justify_threshold` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`justify_threshold` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `text` VARCHAR(254) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`justify_alert`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`justify_alert` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`justify_alert` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `text` VARCHAR(254) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`ticket`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`ticket` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`ticket` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `trigger_user` INT NOT NULL,
  `trigger_date` DATETIME NOT NULL DEFAULT NOW(),
  `alert_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_ticket_alert1_idx` (`alert_id` ASC),
  CONSTRAINT `fk_ticket_alert1`
    FOREIGN KEY (`alert_id`)
    REFERENCES `pontinel`.`alert` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`procedure`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`procedure` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`procedure` (
  `id` INT NOT NULL,
  `action` VARCHAR(254) NOT NULL,
  `description` TEXT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`type_threshold_has_procedure`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`type_threshold_has_procedure` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`type_threshold_has_procedure` (
  `type_threshold_id` INT NOT NULL,
  `procedure_id` INT NOT NULL,
  `order` INT NOT NULL,
  PRIMARY KEY (`type_threshold_id`, `procedure_id`),
  INDEX `fk_type_threshold_has_procedure_procedure1_idx` (`procedure_id` ASC),
  INDEX `fk_type_threshold_has_procedure_type_threshold1_idx` (`type_threshold_id` ASC),
  CONSTRAINT `fk_type_threshold_has_procedure_type_threshold1`
    FOREIGN KEY (`type_threshold_id`)
    REFERENCES `pontinel`.`type_threshold` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_type_threshold_has_procedure_procedure1`
    FOREIGN KEY (`procedure_id`)
    REFERENCES `pontinel`.`procedure` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`type_trigger`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`type_trigger` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`type_trigger` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` VARCHAR(200) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`trigger`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`trigger` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`trigger` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `value` FLOAT NOT NULL,
  `assigned_date` DATETIME NOT NULL DEFAULT NOW(),
  `assigned_by` INT NOT NULL,
  `is_active` TINYINT(1) NOT NULL DEFAULT 1,
  `justification` VARCHAR(254) NOT NULL,
  `sensor_id` INT NOT NULL,
  `type_trigger_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_trigger_sensor1_idx` (`sensor_id` ASC),
  INDEX `fk_trigger_type_trigger1_idx` (`type_trigger_id` ASC),
  CONSTRAINT `fk_trigger_sensor1`
    FOREIGN KEY (`sensor_id`)
    REFERENCES `pontinel`.`sensor` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trigger_type_trigger1`
    FOREIGN KEY (`type_trigger_id`)
    REFERENCES `pontinel`.`type_trigger` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`error_list`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`error_list` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`error_list` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(10) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `description` VARCHAR(254) NOT NULL,
  `solution` VARCHAR(254) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`sensor_has_error`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`sensor_has_error` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`sensor_has_error` (
  `sensor_id` INT NOT NULL,
  `error_list_id` INT NOT NULL,
  `trigger_date` DATETIME NOT NULL DEFAULT NOW(),
  `is_active` TINYINT(1) NOT NULL DEFAULT 1,
  `revised_by` INT NULL,
  `solution` VARCHAR(254) NULL,
  PRIMARY KEY (`sensor_id`, `error_list_id`),
  INDEX `fk_sensor_has_error_list_error_list1_idx` (`error_list_id` ASC),
  INDEX `fk_sensor_has_error_list_sensor1_idx` (`sensor_id` ASC),
  CONSTRAINT `fk_sensor_has_error_list_sensor1`
    FOREIGN KEY (`sensor_id`)
    REFERENCES `pontinel`.`sensor` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sensor_has_error_list_error_list1`
    FOREIGN KEY (`error_list_id`)
    REFERENCES `pontinel`.`error_list` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`node_has_error_list`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`node_has_error_list` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`node_has_error_list` (
  `node_id` INT NOT NULL,
  `error_list_id` INT NOT NULL,
  `trigger_date` DATETIME NOT NULL DEFAULT NOW(),
  `is_active` TINYINT(1) NOT NULL DEFAULT 1,
  `revised_by` INT NULL,
  `solution` VARCHAR(254) NULL,
  PRIMARY KEY (`node_id`, `error_list_id`),
  INDEX `fk_node_has_error_list_error_list1_idx` (`error_list_id` ASC),
  INDEX `fk_node_has_error_list_node1_idx` (`node_id` ASC),
  CONSTRAINT `fk_node_has_error_list_node1`
    FOREIGN KEY (`node_id`)
    REFERENCES `pontinel`.`node` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_node_has_error_list_error_list1`
    FOREIGN KEY (`error_list_id`)
    REFERENCES `pontinel`.`error_list` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`daq_has_error_list`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`daq_has_error_list` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`daq_has_error_list` (
  `daq_id` INT NOT NULL,
  `error_list_id` INT NOT NULL,
  `trigger_date` DATETIME NOT NULL DEFAULT NOW(),
  `is_active` TINYINT(1) NOT NULL DEFAULT 1,
  `revised_by` INT NULL,
  `solution` VARCHAR(254) NULL,
  PRIMARY KEY (`daq_id`, `error_list_id`),
  INDEX `fk_daq_has_error_list_error_list1_idx` (`error_list_id` ASC),
  INDEX `fk_daq_has_error_list_daq1_idx` (`daq_id` ASC),
  CONSTRAINT `fk_daq_has_error_list_daq1`
    FOREIGN KEY (`daq_id`)
    REFERENCES `pontinel`.`daq` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_daq_has_error_list_error_list1`
    FOREIGN KEY (`error_list_id`)
    REFERENCES `pontinel`.`error_list` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pontinel`.`structure_has_alert`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pontinel`.`structure_has_alert` ;

CREATE TABLE IF NOT EXISTS `pontinel`.`structure_has_alert` (
  `structure_id` INT NOT NULL,
  `alert_id` INT NOT NULL,
  `is_valid` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`structure_id`, `alert_id`),
  INDEX `fk_structure_has_alert_alert1_idx` (`alert_id` ASC),
  INDEX `fk_structure_has_alert_structure1_idx` (`structure_id` ASC),
  CONSTRAINT `fk_structure_has_alert_structure1`
    FOREIGN KEY (`structure_id`)
    REFERENCES `pontinel`.`structure` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_structure_has_alert_alert1`
    FOREIGN KEY (`alert_id`)
    REFERENCES `pontinel`.`alert` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `pontinel` ;

-- -----------------------------------------------------
-- procedure getStructuresAdmin
-- -----------------------------------------------------

USE `pontinel`;
DROP procedure IF EXISTS `pontinel`.`getStructuresAdmin`;

DELIMITER $$
USE `pontinel`$$
CREATE PROCEDURE `getStructuresAdmin` ()
BEGIN
	select 
		pontinel.structure.id,
		pontinel.structure.name,
		pontinel.structure.latitude,
		pontinel.structure.longitude,
		ifnull(adv_count, 0) as adv_count,
		ifnull(alert_info.ale_count, 0) as ale_count
	from 
		pontinel.structure
	left join
		(
		select
				structure_info.structure_id as id,
				structure_info.structure_name as name,
				structure_info.structure_latitude as latitude,
				structure_info.structure_longitude as longitude,
				IF(STRCMP(alert_info.alert_type, "Advertencia") = 0 , count(alert_info.alert_type),0) as adv_count,
				IF(STRCMP(alert_info.alert_type, "Alerta") = 0 , count(alert_info.alert_type),0) as ale_count
			from
				(
				select
					pontinel.structure.id as structure_id,
					pontinel.structure.name as structure_name,
					pontinel.structure.latitude as structure_latitude,
					pontinel.structure.longitude as structure_longitude,
					pontinel.alert.id as alert_id,
					pontinel.alert.value as alert_value
				from
					pontinel.structure_has_alert
				inner join
					( pontinel.alert, pontinel.structure )
				on
					pontinel.structure_has_alert.alert_id = pontinel.alert.id and
					pontinel.structure_has_alert.structure_id = pontinel.structure.id and
					pontinel.structure_has_alert.is_valid = 1
				) as structure_info
			inner join
				(
				select
					pontinel.alert.id as alert_id,
					pontinel.alert.value as alert_value,
					pontinel.type_threshold.name as alert_type
				from 
					pontinel.threshold
				inner join
					( pontinel.alert, pontinel.type_threshold )
				on
					pontinel.threshold.type_threshold_id = pontinel.type_threshold.id and
					pontinel.alert.threshold_id = pontinel.threshold.id and
					pontinel.threshold.is_active = 1
				) as alert_info
			on
				alert_info.alert_id = structure_info.alert_id
			group by
				structure_info.structure_id,
				alert_info.alert_type
		) as alert_info
	on
		pontinel.structure.id = alert_info.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getStructuresOfRepr
-- -----------------------------------------------------

USE `pontinel`;
DROP procedure IF EXISTS `pontinel`.`getStructuresOfRepr`;

DELIMITER $$
USE `pontinel`$$
CREATE PROCEDURE `getStructuresOfRepr` (in enterpriseId int)
BEGIN
	select
		structure_info.structure_id as id,
		structure_info.structure_name as name,
        structure_info.structure_latitude as latitude,
        structure_info.structure_longitude as longitude,
		IF(STRCMP(alert_info.alert_type, "Advertencia") = 0 , count(alert_info.alert_type),0) as adv_count,
        IF(STRCMP(alert_info.alert_type, "Alerta") = 0 , count(alert_info.alert_type),0) as ale_count
	from
		(
		select
			pontinel.structure.id as structure_id,
			pontinel.structure.name as structure_name,
            pontinel.structure.latitude as structure_latitude,
            pontinel.structure.longitude as structure_longitude,
			pontinel.alert.id as alert_id,
			pontinel.alert.value as alert_value
		from
			pontinel.structure_has_alert
		inner join
			( pontinel.alert, pontinel.structure )
		on
			pontinel.structure_has_alert.alert_id = pontinel.alert.id and
			pontinel.structure_has_alert.structure_id = pontinel.structure.id and
			pontinel.structure_has_alert.is_valid = 1 and
			pontinel.structure.enterprise_id = enterpriseId
		) as structure_info
	inner join
		(
		select
			pontinel.alert.id as alert_id,
			pontinel.alert.value as alert_value,
			pontinel.type_threshold.name as alert_type
		from 
			pontinel.threshold
		inner join
			( pontinel.alert, pontinel.type_threshold )
		on
			pontinel.threshold.type_threshold_id = pontinel.type_threshold.id and
			pontinel.alert.threshold_id = pontinel.threshold.id and
			pontinel.threshold.is_active = 1
		) as alert_info
	on
		alert_info.alert_id = structure_info.alert_id
	group by
		structure_info.structure_id,
		alert_info.alert_type;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure loginUser
-- -----------------------------------------------------

USE `pontinel`;
DROP procedure IF EXISTS `pontinel`.`loginUser`;

DELIMITER $$
USE `pontinel`$$
CREATE PROCEDURE `loginUser` (in username varchar(150))
BEGIN
	select 
		pontinel.user.id as user_id,
		pontinel.user.username,
        pontinel.user.password,
        pontinel.user.salt,
		pontinel.user.first_name,
		pontinel.user.last_name,
		pontinel.user.phone,
		pontinel.user.email,
		pontinel.user.date_joined,
        pontinel.user.last_login,
		pontinel.user.enterprise_id,
		pontinel.enterprise.name as enterprise_name,
		pontinel.user.profile_id,
		pontinel.profile.name as profile_name,
		pontinel.profile.description as profile_description
	from
		pontinel.user
	inner join
		( pontinel.profile, pontinel.enterprise )
	on
		pontinel.user.username = username and 	
		pontinel.user.is_active = 1 and
		pontinel.profile.id = pontinel.user.profile_id and
		pontinel.enterprise.id = pontinel.user.enterprise_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deserializeUser
-- -----------------------------------------------------

USE `pontinel`;
DROP procedure IF EXISTS `pontinel`.`deserializeUser`;

DELIMITER $$
USE `pontinel`$$
CREATE PROCEDURE `deserializeUser` (in id int)
BEGIN
	select 
		pontinel.user.id as user_id,
		pontinel.user.username,
		pontinel.user.first_name,
		pontinel.user.last_name,
		pontinel.user.phone,
		pontinel.user.email,
		pontinel.user.date_joined,
		pontinel.user.enterprise_id,
		pontinel.enterprise.name as enterprise_name,
		pontinel.user.profile_id,
		pontinel.profile.name as profile_name,
		pontinel.profile.description as profile_description
	from
		pontinel.user
	inner join
		( pontinel.profile, pontinel.enterprise )
	on
		pontinel.user.id = id and
		pontinel.user.is_active = 1 and
		pontinel.profile.id = pontinel.user.profile_id and
		pontinel.enterprise.id = pontinel.user.enterprise_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateLastLogin
-- -----------------------------------------------------

USE `pontinel`;
DROP procedure IF EXISTS `pontinel`.`updateLastLogin`;

DELIMITER $$
USE `pontinel`$$
CREATE PROCEDURE `updateLastLogin` (in user_id int)
BEGIN
	UPDATE 
		pontinel.user 
	SET 
		pontinel.user.last_login = NOW() 
	WHERE 
		pontinel.user.id = user_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getStructuresOfResp
-- -----------------------------------------------------

USE `pontinel`;
DROP procedure IF EXISTS `pontinel`.`getStructuresOfResp`;

DELIMITER $$
USE `pontinel`$$
CREATE PROCEDURE `getStructuresOfResp` (in user_id int)
BEGIN
	select 
		structure.structure_id as id,
		structure.structure_name as name,
        structure.latitude as latitude,
        structure.longitude as longitude,
        structure.adv_count,
        structure.ale_count
	from 
		pontinel.user_has_structure
	inner join
		(
		select
			structure_info.structure_id,
			structure_info.structure_name,
			structure_info.latitude,
			structure_info.longitude,
			IF(STRCMP(alert_info.alert_type, "Advertencia") = 0 , count(alert_info.alert_type),0) as adv_count,
			IF(STRCMP(alert_info.alert_type, "Alerta") = 0 , count(alert_info.alert_type),0) as ale_count
		from
			(
			select
				pontinel.structure.id as structure_id,
				pontinel.structure.name as structure_name,
				pontinel.structure.latitude,
				pontinel.structure.longitude,
				pontinel.alert.id as alert_id,
				pontinel.alert.value as alert_value
			from
				pontinel.structure_has_alert
			inner join
				( pontinel.alert, pontinel.structure )
			on
				pontinel.structure_has_alert.alert_id = pontinel.alert.id and
				pontinel.structure_has_alert.structure_id = pontinel.structure.id and
				pontinel.structure_has_alert.is_valid = 1
			) as structure_info
		inner join
			(
			select
				pontinel.alert.id as alert_id,
				pontinel.alert.value as alert_value,
				pontinel.type_threshold.name as alert_type		
			from 
				pontinel.threshold
			inner join
				( pontinel.alert, pontinel.type_threshold )
			on
				pontinel.threshold.type_threshold_id = pontinel.type_threshold.id and
				pontinel.alert.threshold_id = pontinel.threshold.id and
				pontinel.threshold.is_active = 1
			) as alert_info
		on
			alert_info.alert_id = structure_info.alert_id
		group by
			structure_info.structure_id,
			alert_info.alert_type
	) as structure
	on
		pontinel.user_has_structure.user_id = user_id and
		pontinel.user_has_structure.structure_id = structure.structure_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getStructure
-- -----------------------------------------------------

USE `pontinel`;
DROP procedure IF EXISTS `pontinel`.`getStructure`;

DELIMITER $$
USE `pontinel`$$
CREATE PROCEDURE `getStructure` (in structureId int)
BEGIN
	select 
		pontinel.structure.id,
		pontinel.structure.name,
		pontinel.structure.latitude,
		pontinel.structure.longitude,
		pontinel.structure.length,
		pontinel.structure.width,
		pontinel.structure.route,
		pontinel.structure.km,
		pontinel.structure.date_joined,
		pontinel.structure.photo,
		pontinel.structure.commentary,
		pontinel.enterprise.id as enterprise_id,
		pontinel.enterprise.name as enterprise_name,
		pontinel.region.id as region_id,
		pontinel.region.number as region_number,
		pontinel.region.name as region_name
	from 
		pontinel.structure
	inner join
		(pontinel.enterprise, pontinel.region)
	on
		pontinel.structure.id = structureId and 
		pontinel.structure.enterprise_id = pontinel.enterprise.id and
		pontinel.structure.region_id = pontinel.region.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getSensorsOfStructure
-- -----------------------------------------------------

USE `pontinel`;
DROP procedure IF EXISTS `pontinel`.`getSensorsOfStructure`;

DELIMITER $$
USE `pontinel`$$
CREATE PROCEDURE `getSensorsOfStructure` (in structureId int)
BEGIN
	select 
		sensor_info.*,		
		IFNULL(IF(STRCMP(alert_info.alert_type, "Advertencia") = 0 , count(alert_info.alert_type),0), 0) as adv_count,
		IFNULL(IF(STRCMP(alert_info.alert_type, "Alerta") = 0 , count(alert_info.alert_type),0), 0) as ale_count
	from 
		(
		select
			sensor.id as id,
			sensor.name as name,        
			sensor.type_sensor_name as type_sensor_name
		from
			( pontinel.node, pontinel.daq )
		inner join
			( 
				select 
					pontinel.sensor.*, 
					pontinel.type_sensor.name as type_sensor_name,
					pontinel.type_sensor.model as type_sensor_model,
					pontinel.type_sensor.unit as type_sensor_unit,
					pontinel.type_sensor.datasheet as type_sensor_datasheet
				from pontinel.sensor inner join pontinel.type_sensor on pontinel.sensor.type_id = pontinel.type_sensor.id
			) as sensor
		on
			pontinel.node.daq_id = pontinel.daq.id and
			pontinel.node.id = sensor.node_id and
			pontinel.daq.structure_id = structureId
		group by
			pontinel.sensor.id
		) as sensor_info
	left join 
		(
		select 
			pontinel.alert.id as alert_id,
			pontinel.alert.sensor_id as sensor_id,
			pontinel.type_threshold.name as alert_type
		from
			pontinel.alert
		inner join
			( pontinel.threshold, pontinel.type_threshold )
		on
			pontinel.alert.threshold_id = pontinel.threshold.id and
			pontinel.type_threshold.id = pontinel.threshold.type_threshold_id and
			pontinel.threshold.is_active = 1
		) as alert_info
	on
		alert_info.sensor_id = sensor_info.id
	group by
		sensor_info.id,
		alert_info.alert_type
	order by 
		sensor_info.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getSensorOfStructure
-- -----------------------------------------------------

USE `pontinel`;
DROP procedure IF EXISTS `pontinel`.`getSensorOfStructure`;

DELIMITER $$
USE `pontinel`$$
CREATE PROCEDURE `getSensorOfStructure` (in sensorId int, in structureId int)
BEGIN
	select
		sensor.*
	from
		( pontinel.node, pontinel.daq )
	inner join
		( 
			select 
				pontinel.sensor.*, 
				pontinel.type_sensor.name as type_sensor_name,
				pontinel.type_sensor.model as type_sensor_model,
				pontinel.type_sensor.unit as type_sensor_unit,
				pontinel.type_sensor.datasheet as type_sensor_datasheet
			from 
				pontinel.sensor 
			inner join 
				pontinel.type_sensor 
			on 
				pontinel.sensor.type_id = pontinel.type_sensor.id and
				pontinel.sensor.id = sensorId
		) as sensor
	on
		pontinel.node.daq_id = pontinel.daq.id and
		pontinel.node.id = sensor.node_id and
		pontinel.daq.structure_id = structureId
	group by
		pontinel.sensor.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getThresholdOfSensor
-- -----------------------------------------------------

USE `pontinel`;
DROP procedure IF EXISTS `pontinel`.`getThresholdOfSensor`;

DELIMITER $$
USE `pontinel`$$
CREATE PROCEDURE `getThresholdOfSensor` (in sensorId int)
BEGIN
select
	pontinel.threshold.*,
    pontinel.type_threshold.name as type_threshold_name,
    pontinel.type_threshold.description as type_threshold_description,
    pontinel.type_threshold.color as type_threshold_color
    
from
	pontinel.threshold
inner join
	pontinel.type_threshold
on
	pontinel.threshold.sensor_id = sensorId and
    pontinel.threshold.is_active = 1 and
    pontinel.threshold.type_threshold_id = pontinel.type_threshold.id
order by 
	pontinel.type_threshold.name, pontinel.threshold.value;   
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure setAlert
-- -----------------------------------------------------

USE `pontinel`;
DROP procedure IF EXISTS `pontinel`.`setAlert`;

DELIMITER $$
USE `pontinel`$$
CREATE PROCEDURE `setAlert` (in value double, in triggerDate datetime, in sensorId int, in thresholdId int)
BEGIN
	INSERT INTO pontinel.alert 
		(value, trigger_date, sensor_id, threshold_id) 
	VALUES
		(value, triggerDate, sensorId, thresholdId);
END$$

DELIMITER ;
SET SQL_MODE = '';
DROP USER IF EXISTS pontinel;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'pontinel' IDENTIFIED BY '8.S@Sk{8U[hFh{%c';

GRANT EXECUTE ON ROUTINE `pontinel`.* TO 'pontinel';
SET SQL_MODE = '';
DROP USER IF EXISTS pontinel_root;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'pontinel_root' IDENTIFIED BY 'V!@#q!nNK7S@nr';

GRANT ALL ON `pontinel`.* TO 'pontinel_root';
GRANT SELECT, INSERT, TRIGGER, UPDATE, DELETE ON TABLE `pontinel`.* TO 'pontinel_root';
GRANT SELECT, INSERT, TRIGGER ON TABLE `pontinel`.* TO 'pontinel_root';
GRANT EXECUTE ON ROUTINE `pontinel`.* TO 'pontinel_root';
GRANT SELECT ON TABLE `pontinel`.* TO 'pontinel_root';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `pontinel`.`enterprise`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`enterprise` (`id`, `name`) VALUES (1, 'Direcci&oacute;n de Vialidad Regi&oacute;n de los R&iacute;os');
INSERT INTO `pontinel`.`enterprise` (`id`, `name`) VALUES (2, 'MOP');

COMMIT;


-- -----------------------------------------------------
-- Data for table `pontinel`.`region`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (1, 'XV', 'Región de Arica y Parinacota');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (2, 'I', 'Región de Tarapacá');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (3, 'II', 'Región de Antofagasta');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (4, 'III', 'Región de Atacama');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (5, 'IV', 'Región de Coquimbo');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (6, 'V', 'Región de Valparaiso');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (7, 'RM', 'Región Metropolitana de Santiago');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (8, 'VI', 'Región del libertador Bernardo O\'Higgins');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (9, 'VII', 'Región del Maule');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (10, 'VIII', 'Región del BioBío');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (11, 'IX', 'Región de La Araucanía');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (12, 'XIV', 'Región de Los Ríos');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (13, 'X', 'Región de Los Lagos');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (14, 'XI', 'Región de Aysén del General Carlos Ibáñez del Campo');
INSERT INTO `pontinel`.`region` (`id`, `number`, `name`) VALUES (15, 'XII', 'Región de magallanes y de la Antártica Chilena');

COMMIT;


-- -----------------------------------------------------
-- Data for table `pontinel`.`structure`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`structure` (`id`, `name`, `latitude`, `longitude`, `length`, `width`, `route`, `km`, `date_joined`, `photo`, `commentary`, `enterprise_id`, `region_id`) VALUES (1, 'Puente Pedro de Valdivia', '-73.2477', '-39.8116', 240, 12, 'T-338', 0.450, '2018-01-01 00:00:00', 'PuentePedroDeValdivia.jpg', '', 1, 12);
INSERT INTO `pontinel`.`structure` (`id`, `name`, `latitude`, `longitude`, `length`, `width`, `route`, `km`, `date_joined`, `photo`, `commentary`, `enterprise_id`, `region_id`) VALUES (2, 'Puente Cruces', '39°49\'25.96\"S', '73°15\'49.04\'O', 485, 10, 'T-350', 1.650, '2018-02-01 00:00:00', 'PuenteCruces.jpg', '', 1, 12);
INSERT INTO `pontinel`.`structure` (`id`, `name`, `latitude`, `longitude`, `length`, `width`, `route`, `km`, `date_joined`, `photo`, `commentary`, `enterprise_id`, `region_id`) VALUES (3, 'Puente Lingue', '39°26\'43.2\"S', '73°13\'06.7\"O', 220, 11.7, 'T-250', 1.000, '2018-03-01 00:00:00', 'PuenteLingue.jpg', '', 2, 12);
INSERT INTO `pontinel`.`structure` (`id`, `name`, `latitude`, `longitude`, `length`, `width`, `route`, `km`, `date_joined`, `photo`, `commentary`, `enterprise_id`, `region_id`) VALUES (4, 'Puente Pichoy', '39°41\'13.87\"S', '73°06\'08.59\'O', 87, 13, '202', 23.100, '2018-04-01 00:00:00', 'PuentePichoy.jpg', '', 1, 12);
INSERT INTO `pontinel`.`structure` (`id`, `name`, `latitude`, `longitude`, `length`, `width`, `route`, `km`, `date_joined`, `photo`, `commentary`, `enterprise_id`, `region_id`) VALUES (5, 'Puente Huilo Huilo', '39°49\'27.87\"S', '71°59\'49.23\'O', 100, 7.5, '203 CH', 100.000, '2018-05-01 00:00:00', 'PuenteHuiloHuilo.jpg', '', 2, 12);

COMMIT;


-- -----------------------------------------------------
-- Data for table `pontinel`.`type_threshold`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`type_threshold` (`id`, `name`, `description`, `color`) VALUES (1, 'Advertencia', 'Primer umbral. Notifica mediante correo electrónico al administrador y responsable de la empresa.', 'ffc107');
INSERT INTO `pontinel`.`type_threshold` (`id`, `name`, `description`, `color`) VALUES (2, 'Alerta', 'Segundo umbral. Notifica mediante Whatsapps al administrador, responsable y representante de la empresa.', 'dc3545');

COMMIT;


-- -----------------------------------------------------
-- Data for table `pontinel`.`profile`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`profile` (`id`, `name`, `description`) VALUES (1, 'Administrador', 'Dueños del sistema. Pueden ver y modificar todas las estructuras del sistema. Será notificado al pasar el umbral de cualquier sensor.');
INSERT INTO `pontinel`.`profile` (`id`, `name`, `description`) VALUES (2, 'Representante', 'Puede ver y modificar todo de las estructuras de su empresa. Será notifcado al pasar el umbral de cualquier sensor de su empresa.');
INSERT INTO `pontinel`.`profile` (`id`, `name`, `description`) VALUES (3, 'Responsable', 'Puede ver y modificar uno o más estructuras de su empresa, además será notifcado al pasar el umbral de las estructuras asignadas al usuario.');
INSERT INTO `pontinel`.`profile` (`id`, `name`, `description`) VALUES (4, 'Invitado', 'Puede ver todas las estructuras de su empresa.');

COMMIT;


-- -----------------------------------------------------
-- Data for table `pontinel`.`user`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`user` (`id`, `username`, `salt`, `password`, `first_name`, `last_name`, `phone`, `email`, `date_joined`, `last_login`, `is_active`, `enterprise_id`, `profile_id`) VALUES (2, 'Administrador', 'fb1c43bf717b458e964689dbb5fde472', '5ec533bfed33a7f0c07fd67c7fba8a567b747c641fe523b195fca1813bad6ddc30253741074e738c5c10101991f8e69393c29b2df549a02172be3352e18aa77d', 'Admistrador', 'Administrador', '912345678', 'email@administrador.lc', '2018-09-13 20:00:30', '2018-10-03 06:01:24', 1, 1, 1);
INSERT INTO `pontinel`.`user` (`id`, `username`, `salt`, `password`, `first_name`, `last_name`, `phone`, `email`, `date_joined`, `last_login`, `is_active`, `enterprise_id`, `profile_id`) VALUES (3, 'Representante', 'ce0b9238261b63dec0ee2c1558f576cf', '98faa6d197324f9d5a250fbd4267b882788d1e1fc6073be1cecea6d5f7d18bef06521bdb3845f903e26c1813065ff11cdb809beb2b8ea93a9b07652df51bad39', 'Representante', 'Representante', '912345678', 'email@representante.cl', '2018-09-13 20:00:30', '2018-09-24 12:24:20', 1, 1, 2);
INSERT INTO `pontinel`.`user` (`id`, `username`, `salt`, `password`, `first_name`, `last_name`, `phone`, `email`, `date_joined`, `last_login`, `is_active`, `enterprise_id`, `profile_id`) VALUES (4, 'Responsable', 'ed74a1b634733152949f5a761d47829f', 'c4a4805fd76545eba6a2ccf5c57f742162f21079e6cf7041623f69cd98c69ceb1cfae166e4bf7627b94e3b897b71a764edf25b04fa9e483b635fb2888ba5b305', 'Responsable', 'Responsable', '912345678', 'email@responsable.cl', '2018-09-13 20:00:30', '2018-09-24 17:31:06', 1, 1, 3);
INSERT INTO `pontinel`.`user` (`id`, `username`, `salt`, `password`, `first_name`, `last_name`, `phone`, `email`, `date_joined`, `last_login`, `is_active`, `enterprise_id`, `profile_id`) VALUES (5, 'Invitado', '343c44dd9dd3773384d8b788b44e0e82', 'fae8deaf9d65a56720b8be2cae8d867e7beb7124477660db931be5baff7c67e12813be4c0b12e73626580a821e05a50889f491ff02c23c1c7d3008f783c9c01d', 'Invitado', 'Invitado', '912345678', 'email@invitado.cl', '2018-09-13 20:00:30', '2018-09-27 18:23:02', 1, 1, 4);

COMMIT;


-- -----------------------------------------------------
-- Data for table `pontinel`.`justify_threshold`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`justify_threshold` (`id`, `text`) VALUES (1, 'Calibración inicial.');
INSERT INTO `pontinel`.`justify_threshold` (`id`, `text`) VALUES (2, 'Evento no causó daños, es seguro aumentar el umbral.');
INSERT INTO `pontinel`.`justify_threshold` (`id`, `text`) VALUES (3, 'Corrección del umbral por estar mal definido.');

COMMIT;


-- -----------------------------------------------------
-- Data for table `pontinel`.`justify_alert`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`justify_alert` (`id`, `text`) VALUES (1, 'Error de medición.');
INSERT INTO `pontinel`.`justify_alert` (`id`, `text`) VALUES (2, 'Evento no causó daños.');
INSERT INTO `pontinel`.`justify_alert` (`id`, `text`) VALUES (3, 'Daños causados se encuentran controlados.');

COMMIT;


-- -----------------------------------------------------
-- Data for table `pontinel`.`procedure`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`procedure` (`id`, `action`, `description`) VALUES (1, 'Inspeccionar el puente físicamente dentro de un plazo de 24 horas.', NULL);
INSERT INTO `pontinel`.`procedure` (`id`, `action`, `description`) VALUES (2, 'Evaluar el estado del puente.', NULL);
INSERT INTO `pontinel`.`procedure` (`id`, `action`, `description`) VALUES (3, 'Evaluar el registro del sensor que casa la advertencia.', NULL);
INSERT INTO `pontinel`.`procedure` (`id`, `action`, `description`) VALUES (4, 'Reportar solución en PONTINEL.', NULL);
INSERT INTO `pontinel`.`procedure` (`id`, `action`, `description`) VALUES (5, 'Inspección del puente físicamente de forma inmediata.', NULL);
INSERT INTO `pontinel`.`procedure` (`id`, `action`, `description`) VALUES (6, 'Notificar a carabineros.', NULL);
INSERT INTO `pontinel`.`procedure` (`id`, `action`, `description`) VALUES (7, 'Solicitar cerrar el tránsito sobre el puente hasta análisis del estado del puente.', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `pontinel`.`type_threshold_has_procedure`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`type_threshold_has_procedure` (`type_threshold_id`, `procedure_id`, `order`) VALUES (1, 1, 0);
INSERT INTO `pontinel`.`type_threshold_has_procedure` (`type_threshold_id`, `procedure_id`, `order`) VALUES (1, 2, 1);
INSERT INTO `pontinel`.`type_threshold_has_procedure` (`type_threshold_id`, `procedure_id`, `order`) VALUES (1, 3, 2);
INSERT INTO `pontinel`.`type_threshold_has_procedure` (`type_threshold_id`, `procedure_id`, `order`) VALUES (1, 4, 3);
INSERT INTO `pontinel`.`type_threshold_has_procedure` (`type_threshold_id`, `procedure_id`, `order`) VALUES (2, 5, 0);
INSERT INTO `pontinel`.`type_threshold_has_procedure` (`type_threshold_id`, `procedure_id`, `order`) VALUES (2, 6, 1);
INSERT INTO `pontinel`.`type_threshold_has_procedure` (`type_threshold_id`, `procedure_id`, `order`) VALUES (2, 7, 2);
INSERT INTO `pontinel`.`type_threshold_has_procedure` (`type_threshold_id`, `procedure_id`, `order`) VALUES (2, 2, 3);
INSERT INTO `pontinel`.`type_threshold_has_procedure` (`type_threshold_id`, `procedure_id`, `order`) VALUES (2, 3, 4);
INSERT INTO `pontinel`.`type_threshold_has_procedure` (`type_threshold_id`, `procedure_id`, `order`) VALUES (2, 4, 5);

COMMIT;


-- -----------------------------------------------------
-- Data for table `pontinel`.`type_trigger`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`type_trigger` (`id`, `name`, `description`) VALUES (1, 'Trigger ON', 'Valor mínimo desde donde se consideran los valores del sensor.');
INSERT INTO `pontinel`.`type_trigger` (`id`, `name`, `description`) VALUES (2, 'Trigger OFF', 'Valor mínimo desde el cual se omiten los valores del sensor.');

COMMIT;


-- -----------------------------------------------------
-- Data for table `pontinel`.`error_list`
-- -----------------------------------------------------
START TRANSACTION;
USE `pontinel`;
INSERT INTO `pontinel`.`error_list` (`id`, `code`, `name`, `description`, `solution`) VALUES (1, 'BAT020', 'Error de bateria', 'Nivel de la bateria bajo el 20%.', 'Se recomienda cambiar la bateria.');
INSERT INTO `pontinel`.`error_list` (`id`, `code`, `name`, `description`, `solution`) VALUES (2, 'BAT010', 'Error de bateria', 'Nivel de la bateria muy bajo.', 'Se recomienda cambiar la bateria lo antes posible.');
INSERT INTO `pontinel`.`error_list` (`id`, `code`, `name`, `description`, `solution`) VALUES (3, 'CON001', 'Error de comunicación', 'No se han recibido datos desde la estructura hace un tiempo.', 'Se recomienda revisar el dispositivo asociado al problema.');
INSERT INTO `pontinel`.`error_list` (`id`, `code`, `name`, `description`, `solution`) VALUES (4, 'SEN001', 'Error de sensor', 'El sensor no ha logrado recoelctar información desde hace un tiempo.', 'Se recomienda revisar el sensor lo antes posible.');

COMMIT;

